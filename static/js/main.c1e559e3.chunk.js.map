{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","items","map","item","className","key","type","id","text","value","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","preventDefault","newItem","this","setState","Date","now","filteredItems","filter","console","log","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,wLCgC5BC,MA3Bf,SAAmBC,GACf,IACMC,EADSD,EAAME,MACGC,KAAI,SAAAC,GAExB,OAAO,yBAAKC,UAAY,OAAOC,IAAOF,EAAKE,KAC/B,2BACA,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKK,KAAKC,MAAQN,EAAKK,KAC1CE,SAAW,SAACC,GACRZ,EAAMa,UAAUD,EAAEE,OAAOJ,MAAMN,EAAKE,QAG5C,8BACI,kBAAC,IAAD,CAAiBD,UAAY,UAAUU,KAAO,QAC1CC,QAAU,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAM9D,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAS,eACjClB,K,eCpBbmB,IAAQC,IAAIC,K,IAiFGC,E,kDA9Eb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDwB,MAAQ,CACXtB,MAAM,GACNuB,YAAc,CACZhB,KAAM,GACNH,IAAK,KAGT,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZD,E,oDAcXf,GACLA,EAAEiB,iBACF,IAAMC,EAAUC,KAAKP,MAAMC,YAC3B,GAAmB,KAAhBK,EAAQrB,KAAW,CACpB,IAAMP,EAAM,GAAD,mBAAM6B,KAAKP,MAAMtB,OAAjB,CAAwB4B,IACnCC,KAAKC,SAAS,CACZ9B,MAAOA,EACPuB,YAAY,CACVhB,KAAM,GACNH,IAAK,S,kCAKDM,GACVmB,KAAKC,SAAS,CACZP,YAAY,CACZhB,KAAKG,EAAEE,OAAOJ,MACdJ,IAAI2B,KAAKC,W,iCAIF5B,GACT,IAAM6B,EAAgBJ,KAAKP,MAAMtB,MAAMkC,QAAO,SAAAhC,GAAI,OAChDA,EAAKE,MAAMA,KACXyB,KAAKC,SAAS,CACZ9B,MAAMiC,M,gCAIF1B,EAAMH,GACd+B,QAAQC,IAAI,UAAWP,KAAKP,MAAMtB,OAChC,IAAMA,EAAQ6B,KAAKP,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZ+B,QAAQC,IAAIlC,EAAKE,IAAK,KAAMA,GAC5BF,EAAKK,KAAMA,MAGfsB,KAAKC,SAAS,CACZ9B,MAAOA,M,+BAMX,OACE,yBAAKG,UAAW,OAChB,gCACE,0BAAMG,GAAK,aAAa+B,SAAWR,KAAKH,SACxC,2BAAOrB,KAAO,OAAOiC,YAAc,aAAa9B,MAASqB,KAAKP,MAAMC,YAAYhB,KAAME,SAAWoB,KAAKL,cACtG,4BAAQnB,KAAO,UAAf,QAEA,2BAAIwB,KAAKP,MAAMtB,MAAMO,MAEvB,kBAAC,EAAD,CAAWP,MAAS6B,KAAKP,MAAMtB,MAAOe,WAAcc,KAAKd,WAAYJ,UAAakB,KAAKlB,kB,GAtE3E4B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.c1e559e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n    const items  = props.items;\r\n    const listItems = items.map(item =>\r\n        {\r\n        return <div className = 'list' key = {item.key}>\r\n                    <p>\r\n                    <input type=\"text\" id={item.text}value ={item.text}\r\n                        onChange ={(e)=>{\r\n                            props.setUpdate(e.target.value,item.key)\r\n                        }}\r\n                    />\r\n                    <span>\r\n                        <FontAwesomeIcon className = 'faicons' icon = 'trash'\r\n                            onClick ={() => props.deleteItem(item.key)}\r\n                        />\r\n                    </span>\r\n                    </p>\r\n                </div>\r\n    })\r\n    return (\r\n        <div>\r\n            <FlipMove duration={250} easing = 'ease-in-out'>\r\n            {listItems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n}\r\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTrash);\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      items:[],\n      currentItem : {\n        text: '',\n        key: ''\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\naddItem (e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if(newItem.text!== ''){\n      const items= [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem:{\n          text: '',\n          key: ''\n        }\n      })\n    }\n  }\n  handleInput(e) {\n    this.setState({\n      currentItem:{\n      text:e.target.value,\n      key:Date.now()\n      }\n    })\n  }\n  deleteItem(key) {\n    const filteredItems = this.state.items.filter(item =>\n      item.key!==key);\n      this.setState({\n        items:filteredItems\n      })\n\n    }\n  setUpdate(text, key) {\n    console.log('items: ' +this.state.items)\n      const items = this.state.items\n      items.map(item=>{\n        if(item.key===key){\n          console.log(item.key +'  ' +key)\n          item.text =text;\n        }\n      })\n      this.setState({\n        items: items\n      })\n\n\n    }\n  render () {\n    return (\n      <div className ='App'>\n      <header>\n        <form id = \"to-do-form\" onSubmit= {this.addItem} >\n        <input type = 'text' placeholder = 'Enter Task' value = {this.state.currentItem.text} onChange= {this.handleInput}></input>\n        <button type = 'submit'>add</button>\n        </form>\n        <p>{this.state.items.text}</p>\n\n      <ListItems items = {this.state.items} deleteItem = {this.deleteItem} setUpdate = {this.setUpdate}/>\n          \n          </header>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}